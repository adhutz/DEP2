% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DEP_aggregation.R
\name{aggregate_pe}
\alias{aggregate_pe}
\title{Summarize peptide quantity to protein quantity}
\usage{
aggregate_pe(
  pe,
  aggrefun = c("RobustSummary", "medianPolish", "totalMean"),
  aggregate_Peptide_Type = c("Unique + Razor", "Unique"),
  fcol,
  peptide_assay_name = "peptideNorm",
  reserve = "Gene.names"
)
}
\arguments{
\item{pe}{A QFeatures object,
contains the normalized peptide assay}

\item{aggrefun}{A function used for quantitative feature aggregation.
It can be a character in "RobustSummary","medianPolish","totalMean" or other function.
Details see \code{\link[QFeatures]{aggregateFeatures}}}

\item{aggregate_Peptide_Type}{Character in "Unique + Razor" or "Unique".
Use what kind of peptides to summarise proteins. If choose "Unique", return output just save unique peptides in smallest proteingroups.}

\item{fcol}{Character(1), defining how to summarise the features. Exist in \code{rowData(pe)}.}

\item{peptide_assay_name}{Character(1), the name of aggregation result assay}

\item{reserve}{Character, the column(s) which will reserve after aggregate, such as the columns store protein information can.}
}
\value{
A QFeatures object with a new protein aggregation assay.
}
\description{
Aggregation peptide to protein vis 'aggrefun'.
}
\examples{
\dontrun{
# Load example peptide data
data(Silicosis_peptide)
ecols <- grep("Intensity.", colnames(Silicosis_peptide), value = T)

# construct QFeatures object
pe_peptides <- make_pe_parse(Silicosis_peptide, columns = ecols, remove_prefix = T, log2transform = T,mode = "delim")
filt_pe <- filter_pe(pe_peptides, thr = 1,fraction = 0.4, filter_formula = ~ Reverse != '+' & Potential.contaminant !="+" )
imp_pe <- QFeatures::addAssay(filt_pe, DEP2::impute(filt_pe[["peptideRaw"]], fun = "MinDet"), name = "peptideImp")
norm_pe <- DEP2:::normalize_pe(imp_pe,method = "quantiles", i = "peptideImp", name = "peptideNorm")

# Summarize peptide value to protein quantity
protein_pe <- DEP2::aggregate_pe(norm_pe, fcol = "Proteins", peptide_assay_name = "peptideNorm")
class(protein_pe)

}
}
